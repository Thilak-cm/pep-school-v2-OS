rules_version = '3';
service cloud.firestore {
  match /databases/{database}/documents {

    function isPepUser() {
      return request.auth != null
        && request.auth.token.email.matches('.*@pepschoolv2\\.com$')
        && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isAdmin() {
      return isPepUser() && userDoc().data.role == 'admin';
    }

    function isTeacher() {
      return isPepUser() && userDoc().data.role == 'teacher';
    }

    // =========================
    // Helper functions
    // =========================
    function classroomDoc(classroomID) {
      return get(/databases/$(database)/documents/classrooms/$(classroomID));
    }

    function studentDoc(studentID) {
      return get(/databases/$(database)/documents/students/$(studentID));
    }

    function teacherAssignedToClassroom(classroomID) {
      return classroomDoc(classroomID).exists() &&
             request.auth.uid in classroomDoc(classroomID).data.teacherIDs;
    }

    function teacherAssignedToStudent(studentID) {
      return studentDoc(studentID).exists() &&
             teacherAssignedToClassroom(studentDoc(studentID).data.classroomID);
    }

    function teacherCanReadObservation() {
      // Teacher can read if author or assigned to the student's classroom
      return (request.auth.uid == resource.data.userID) ||
             teacherAssignedToStudent(resource.data.studentID);
    }

    // =========================
    // Generic access
    // =========================
    match /users/{uid} {
      allow read: if isAdmin() || request.auth.uid == uid; // Admins can read all, users can read their own
      allow write: if false;    // Managed by backend/admin only
    }

    // -------------------------
    // Observations Collection
    // -------------------------
    match /observations/{obsId} {
      // READ
      allow read: if isAdmin() || (isTeacher() && teacherCanReadObservation());

      // CREATE
      allow create: if (isTeacher() || isAdmin())
        && request.resource.data.userID == request.auth.uid
        && request.resource.data.studentID is string
        && studentDoc(request.resource.data.studentID).exists()
        && classroomDoc(studentDoc(request.resource.data.studentID).data.classroomID).exists()
        && (isAdmin() || teacherAssignedToClassroom(studentDoc(request.resource.data.studentID).data.classroomID))
        && request.resource.data.classroomID == studentDoc(request.resource.data.studentID).data.classroomID
        && request.resource.data.type in ['voice', 'text']
        && request.resource.data.text is string;

      // UPDATE
      // Admins may update freely
      allow update: if isAdmin() || (
        // Teachers can ONLY reassign observations they authored
        isTeacher()
        && request.auth.uid == resource.data.userID
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['studentID', 'classroomID', 'updatedAt', 'editedAt', 'editedBy'])
        && studentDoc(request.resource.data.studentID).exists()
        && request.resource.data.classroomID == studentDoc(request.resource.data.studentID).data.classroomID
        && teacherAssignedToClassroom(request.resource.data.classroomID)
      );

      // DELETE
      allow delete: if isAdmin();
    }

    // -------------------------
    // Classrooms & Students metadata (read-only for now)
    // -------------------------
    match /classrooms/{id} {
      allow read: if isAdmin() || (isTeacher() && request.auth.uid in resource.data.teacherIDs);
      allow write: if isAdmin();
    }

    match /students/{id} {
      allow read: if isAdmin() || (isTeacher() && teacherAssignedToStudent(id));
      allow write: if isAdmin();
    }

    // -------------------------
    // Tags
    // -------------------------
    match /tags/{tagID} {
      allow read: if isPepUser();
      allow write: if isAdmin();
    }

    // -------------------------
    // Access Logs (read/write restricted)
    // -------------------------
    match /access_logs/{logId} {
      // Keep client writes disabled; use Callable Function for logging
      allow create: if false;
      allow read, update, delete: if false; // No client reads
    }

    // Fallback deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}